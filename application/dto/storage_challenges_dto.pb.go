// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: storage_challenges_dto.proto

package dto

import (
	fmt "fmt"
	_ "github.com/AsynkronIT/protoactor-go/actor"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type StorageChallengeDataMessageType int32

const (
	MessageType_UNKNOWN                                StorageChallengeDataMessageType = 0
	MessageType_STORAGE_CHALLENGE_ISSUANCE_MESSAGE     StorageChallengeDataMessageType = 1
	MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE     StorageChallengeDataMessageType = 2
	MessageType_STORAGE_CHALLENGE_VERIFICATION_MESSAGE StorageChallengeDataMessageType = 3
)

var StorageChallengeDataMessageType_name = map[int32]string{
	0: "MessageType_UNKNOWN",
	1: "MessageType_STORAGE_CHALLENGE_ISSUANCE_MESSAGE",
	2: "MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE",
	3: "MessageType_STORAGE_CHALLENGE_VERIFICATION_MESSAGE",
}

var StorageChallengeDataMessageType_value = map[string]int32{
	"MessageType_UNKNOWN":                                0,
	"MessageType_STORAGE_CHALLENGE_ISSUANCE_MESSAGE":     1,
	"MessageType_STORAGE_CHALLENGE_RESPONSE_MESSAGE":     2,
	"MessageType_STORAGE_CHALLENGE_VERIFICATION_MESSAGE": 3,
}

func (StorageChallengeDataMessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_330a053522a8fb00, []int{0, 0}
}

type StorageChallengeDataStatus int32

const (
	Status_UNKNOWN   StorageChallengeDataStatus = 0
	Status_PENDING   StorageChallengeDataStatus = 1
	Status_RESPONDED StorageChallengeDataStatus = 2
)

var StorageChallengeDataStatus_name = map[int32]string{
	0: "Status_UNKNOWN",
	1: "Status_PENDING",
	2: "Status_RESPONDED",
}

var StorageChallengeDataStatus_value = map[string]int32{
	"Status_UNKNOWN":   0,
	"Status_PENDING":   1,
	"Status_RESPONDED": 2,
}

func (StorageChallengeDataStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_330a053522a8fb00, []int{0, 1}
}

type StorageChallengeData struct {
	MessageId                     string                             `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	MessageType                   StorageChallengeDataMessageType    `protobuf:"varint,2,opt,name=message_type,json=messageType,proto3,enum=dto.StorageChallengeDataMessageType" json:"message_type,omitempty"`
	ChallengeStatus               StorageChallengeDataStatus         `protobuf:"varint,3,opt,name=challenge_status,json=challengeStatus,proto3,enum=dto.StorageChallengeDataStatus" json:"challenge_status,omitempty"`
	TimestampChallengeSent        int64                              `protobuf:"varint,4,opt,name=timestamp_challenge_sent,json=timestampChallengeSent,proto3" json:"timestamp_challenge_sent,omitempty"`
	TimestampChallengeRespondedTo int64                              `protobuf:"varint,5,opt,name=timestamp_challenge_responded_to,json=timestampChallengeRespondedTo,proto3" json:"timestamp_challenge_responded_to,omitempty"`
	TimestampChallengeVerified    int64                              `protobuf:"varint,6,opt,name=timestamp_challenge_verified,json=timestampChallengeVerified,proto3" json:"timestamp_challenge_verified,omitempty"`
	BlockHashWhenChallengeSent    string                             `protobuf:"bytes,7,opt,name=block_hash_when_challenge_sent,json=blockHashWhenChallengeSent,proto3" json:"block_hash_when_challenge_sent,omitempty"`
	ChallengingMasternodeId       string                             `protobuf:"bytes,8,opt,name=challenging_masternode_id,json=challengingMasternodeId,proto3" json:"challenging_masternode_id,omitempty"`
	RespondingMasternodeId        string                             `protobuf:"bytes,9,opt,name=responding_masternode_id,json=respondingMasternodeId,proto3" json:"responding_masternode_id,omitempty"`
	ChallengeFile                 *StorageChallengeDataChallengeFile `protobuf:"bytes,10,opt,name=challenge_file,json=challengeFile,proto3" json:"challenge_file,omitempty"`
	ChallengeSliceCorrectHash     string                             `protobuf:"bytes,11,opt,name=challenge_slice_correct_hash,json=challengeSliceCorrectHash,proto3" json:"challenge_slice_correct_hash,omitempty"`
	ChallengeResponseHash         string                             `protobuf:"bytes,12,opt,name=challenge_response_hash,json=challengeResponseHash,proto3" json:"challenge_response_hash,omitempty"`
	ChallengeId                   string                             `protobuf:"bytes,13,opt,name=challenge_id,json=challengeId,proto3" json:"challenge_id,omitempty"`
}

func (m *StorageChallengeData) Reset()      { *m = StorageChallengeData{} }
func (*StorageChallengeData) ProtoMessage() {}
func (*StorageChallengeData) Descriptor() ([]byte, []int) {
	return fileDescriptor_330a053522a8fb00, []int{0}
}
func (m *StorageChallengeData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageChallengeData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageChallengeData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageChallengeData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageChallengeData.Merge(m, src)
}
func (m *StorageChallengeData) XXX_Size() int {
	return m.Size()
}
func (m *StorageChallengeData) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageChallengeData.DiscardUnknown(m)
}

var xxx_messageInfo_StorageChallengeData proto.InternalMessageInfo

func (m *StorageChallengeData) GetMessageId() string {
	if m != nil {
		return m.MessageId
	}
	return ""
}

func (m *StorageChallengeData) GetMessageType() StorageChallengeDataMessageType {
	if m != nil {
		return m.MessageType
	}
	return MessageType_UNKNOWN
}

func (m *StorageChallengeData) GetChallengeStatus() StorageChallengeDataStatus {
	if m != nil {
		return m.ChallengeStatus
	}
	return Status_UNKNOWN
}

func (m *StorageChallengeData) GetTimestampChallengeSent() int64 {
	if m != nil {
		return m.TimestampChallengeSent
	}
	return 0
}

func (m *StorageChallengeData) GetTimestampChallengeRespondedTo() int64 {
	if m != nil {
		return m.TimestampChallengeRespondedTo
	}
	return 0
}

func (m *StorageChallengeData) GetTimestampChallengeVerified() int64 {
	if m != nil {
		return m.TimestampChallengeVerified
	}
	return 0
}

func (m *StorageChallengeData) GetBlockHashWhenChallengeSent() string {
	if m != nil {
		return m.BlockHashWhenChallengeSent
	}
	return ""
}

func (m *StorageChallengeData) GetChallengingMasternodeId() string {
	if m != nil {
		return m.ChallengingMasternodeId
	}
	return ""
}

func (m *StorageChallengeData) GetRespondingMasternodeId() string {
	if m != nil {
		return m.RespondingMasternodeId
	}
	return ""
}

func (m *StorageChallengeData) GetChallengeFile() *StorageChallengeDataChallengeFile {
	if m != nil {
		return m.ChallengeFile
	}
	return nil
}

func (m *StorageChallengeData) GetChallengeSliceCorrectHash() string {
	if m != nil {
		return m.ChallengeSliceCorrectHash
	}
	return ""
}

func (m *StorageChallengeData) GetChallengeResponseHash() string {
	if m != nil {
		return m.ChallengeResponseHash
	}
	return ""
}

func (m *StorageChallengeData) GetChallengeId() string {
	if m != nil {
		return m.ChallengeId
	}
	return ""
}

type StorageChallengeDataChallengeFile struct {
	FileHashToChallenge      string `protobuf:"bytes,1,opt,name=file_hash_to_challenge,json=fileHashToChallenge,proto3" json:"file_hash_to_challenge,omitempty"`
	ChallengeSliceStartIndex int64  `protobuf:"varint,2,opt,name=challenge_slice_start_index,json=challengeSliceStartIndex,proto3" json:"challenge_slice_start_index,omitempty"`
	ChallengeSliceEndIndex   int64  `protobuf:"varint,3,opt,name=challenge_slice_end_index,json=challengeSliceEndIndex,proto3" json:"challenge_slice_end_index,omitempty"`
}

func (m *StorageChallengeDataChallengeFile) Reset()      { *m = StorageChallengeDataChallengeFile{} }
func (*StorageChallengeDataChallengeFile) ProtoMessage() {}
func (*StorageChallengeDataChallengeFile) Descriptor() ([]byte, []int) {
	return fileDescriptor_330a053522a8fb00, []int{0, 0}
}
func (m *StorageChallengeDataChallengeFile) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageChallengeDataChallengeFile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageChallengeDataChallengeFile.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageChallengeDataChallengeFile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageChallengeDataChallengeFile.Merge(m, src)
}
func (m *StorageChallengeDataChallengeFile) XXX_Size() int {
	return m.Size()
}
func (m *StorageChallengeDataChallengeFile) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageChallengeDataChallengeFile.DiscardUnknown(m)
}

var xxx_messageInfo_StorageChallengeDataChallengeFile proto.InternalMessageInfo

func (m *StorageChallengeDataChallengeFile) GetFileHashToChallenge() string {
	if m != nil {
		return m.FileHashToChallenge
	}
	return ""
}

func (m *StorageChallengeDataChallengeFile) GetChallengeSliceStartIndex() int64 {
	if m != nil {
		return m.ChallengeSliceStartIndex
	}
	return 0
}

func (m *StorageChallengeDataChallengeFile) GetChallengeSliceEndIndex() int64 {
	if m != nil {
		return m.ChallengeSliceEndIndex
	}
	return 0
}

type StorageChallengeRequest struct {
	Data *StorageChallengeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StorageChallengeRequest) Reset()      { *m = StorageChallengeRequest{} }
func (*StorageChallengeRequest) ProtoMessage() {}
func (*StorageChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_330a053522a8fb00, []int{1}
}
func (m *StorageChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageChallengeRequest.Merge(m, src)
}
func (m *StorageChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *StorageChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StorageChallengeRequest proto.InternalMessageInfo

func (m *StorageChallengeRequest) GetData() *StorageChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type StorageChallengeReply struct {
	Data *StorageChallengeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *StorageChallengeReply) Reset()      { *m = StorageChallengeReply{} }
func (*StorageChallengeReply) ProtoMessage() {}
func (*StorageChallengeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_330a053522a8fb00, []int{2}
}
func (m *StorageChallengeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StorageChallengeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StorageChallengeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StorageChallengeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StorageChallengeReply.Merge(m, src)
}
func (m *StorageChallengeReply) XXX_Size() int {
	return m.Size()
}
func (m *StorageChallengeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StorageChallengeReply.DiscardUnknown(m)
}

var xxx_messageInfo_StorageChallengeReply proto.InternalMessageInfo

func (m *StorageChallengeReply) GetData() *StorageChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type VerifyStorageChallengeRequest struct {
	Data *StorageChallengeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *VerifyStorageChallengeRequest) Reset()      { *m = VerifyStorageChallengeRequest{} }
func (*VerifyStorageChallengeRequest) ProtoMessage() {}
func (*VerifyStorageChallengeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_330a053522a8fb00, []int{3}
}
func (m *VerifyStorageChallengeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyStorageChallengeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyStorageChallengeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyStorageChallengeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyStorageChallengeRequest.Merge(m, src)
}
func (m *VerifyStorageChallengeRequest) XXX_Size() int {
	return m.Size()
}
func (m *VerifyStorageChallengeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyStorageChallengeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyStorageChallengeRequest proto.InternalMessageInfo

func (m *VerifyStorageChallengeRequest) GetData() *StorageChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

type VerifyStorageChallengeReply struct {
	Data *StorageChallengeData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *VerifyStorageChallengeReply) Reset()      { *m = VerifyStorageChallengeReply{} }
func (*VerifyStorageChallengeReply) ProtoMessage() {}
func (*VerifyStorageChallengeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_330a053522a8fb00, []int{4}
}
func (m *VerifyStorageChallengeReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VerifyStorageChallengeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VerifyStorageChallengeReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VerifyStorageChallengeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VerifyStorageChallengeReply.Merge(m, src)
}
func (m *VerifyStorageChallengeReply) XXX_Size() int {
	return m.Size()
}
func (m *VerifyStorageChallengeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_VerifyStorageChallengeReply.DiscardUnknown(m)
}

var xxx_messageInfo_VerifyStorageChallengeReply proto.InternalMessageInfo

func (m *VerifyStorageChallengeReply) GetData() *StorageChallengeData {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("dto.StorageChallengeDataMessageType", StorageChallengeDataMessageType_name, StorageChallengeDataMessageType_value)
	proto.RegisterEnum("dto.StorageChallengeDataStatus", StorageChallengeDataStatus_name, StorageChallengeDataStatus_value)
	proto.RegisterType((*StorageChallengeData)(nil), "dto.StorageChallengeData")
	proto.RegisterType((*StorageChallengeDataChallengeFile)(nil), "dto.StorageChallengeData.challengeFile")
	proto.RegisterType((*StorageChallengeRequest)(nil), "dto.StorageChallengeRequest")
	proto.RegisterType((*StorageChallengeReply)(nil), "dto.StorageChallengeReply")
	proto.RegisterType((*VerifyStorageChallengeRequest)(nil), "dto.VerifyStorageChallengeRequest")
	proto.RegisterType((*VerifyStorageChallengeReply)(nil), "dto.VerifyStorageChallengeReply")
}

func init() { proto.RegisterFile("storage_challenges_dto.proto", fileDescriptor_330a053522a8fb00) }

var fileDescriptor_330a053522a8fb00 = []byte{
	// 813 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x95, 0xcd, 0x6e, 0xdb, 0x46,
	0x10, 0xc7, 0xb5, 0x56, 0xea, 0xd6, 0x23, 0xc7, 0x15, 0x36, 0x89, 0x4d, 0x3b, 0x36, 0xa1, 0x0a,
	0x28, 0xea, 0x8b, 0x25, 0x40, 0x01, 0x8c, 0x7e, 0xa0, 0x48, 0x15, 0x99, 0x92, 0x88, 0xd8, 0x54,
	0x40, 0x2a, 0x09, 0xd0, 0x0b, 0x41, 0x73, 0x37, 0x12, 0x61, 0x8a, 0xcb, 0x72, 0x57, 0x4d, 0x75,
	0xeb, 0xb5, 0xb7, 0x3e, 0x46, 0x9f, 0xa2, 0xc7, 0xa2, 0x47, 0x1f, 0x73, 0xac, 0xe5, 0x4b, 0x8f,
	0x79, 0x84, 0x82, 0x4b, 0x8a, 0xd4, 0x87, 0xd5, 0x22, 0x40, 0x6f, 0xe2, 0xcc, 0xff, 0xf7, 0xd7,
	0xcc, 0xce, 0x7e, 0xc0, 0x21, 0x17, 0x2c, 0x72, 0x06, 0xd4, 0x76, 0x87, 0x8e, 0xef, 0xd3, 0x60,
	0x40, 0xb9, 0x4d, 0x04, 0xab, 0x85, 0x11, 0x13, 0x0c, 0x17, 0x89, 0x60, 0x07, 0xa7, 0x03, 0x4f,
	0x0c, 0xc7, 0x97, 0x35, 0x97, 0x8d, 0xea, 0x4d, 0x3e, 0x09, 0xae, 0x22, 0x16, 0xe8, 0xfd, 0xba,
	0x54, 0x38, 0xae, 0x60, 0xd1, 0xc9, 0x80, 0xd5, 0xe5, 0x8f, 0x24, 0xc6, 0x13, 0xb8, 0xfa, 0x0b,
	0xc0, 0x43, 0x2b, 0x71, 0x6f, 0xcd, 0xcc, 0xcf, 0x1c, 0xe1, 0xe0, 0x23, 0x80, 0x11, 0xe5, 0x3c,
	0xfe, 0x57, 0x8f, 0x28, 0xa8, 0x82, 0x8e, 0xb7, 0xcc, 0xad, 0x34, 0xa2, 0x13, 0xdc, 0x85, 0xed,
	0x59, 0x5a, 0x4c, 0x42, 0xaa, 0x6c, 0x54, 0xd0, 0xf1, 0x4e, 0xe3, 0xf3, 0x5a, 0x5c, 0xd6, 0x5d,
	0x7e, 0xb5, 0x54, 0xdd, 0x9f, 0x84, 0xd4, 0x2c, 0xcd, 0x7d, 0xe0, 0xe7, 0x50, 0xce, 0xda, 0xb2,
	0xb9, 0x70, 0xc4, 0x98, 0x2b, 0x45, 0xe9, 0x56, 0x59, 0xef, 0x96, 0xe8, 0xcc, 0x4f, 0x33, 0xd2,
	0x92, 0x01, 0xfc, 0x25, 0x28, 0xc2, 0x1b, 0x51, 0x2e, 0x9c, 0x51, 0x68, 0xcf, 0xd9, 0xd2, 0x40,
	0x28, 0xf7, 0x2a, 0xe8, 0xb8, 0x68, 0xee, 0x66, 0xf9, 0xcc, 0xd1, 0xa2, 0x81, 0xc0, 0x1d, 0xa8,
	0xdc, 0x45, 0x46, 0x94, 0x87, 0x2c, 0x20, 0x94, 0xd8, 0x82, 0x29, 0x1f, 0x49, 0x87, 0xa3, 0x55,
	0x07, 0x73, 0xa6, 0xea, 0x33, 0xfc, 0x1d, 0x1c, 0xde, 0x65, 0xf4, 0x23, 0x8d, 0xbc, 0x37, 0x1e,
	0x25, 0xca, 0xa6, 0x34, 0x39, 0x58, 0x35, 0x79, 0x95, 0x2a, 0xf0, 0x33, 0x50, 0x2f, 0x7d, 0xe6,
	0x5e, 0xd9, 0x43, 0x87, 0x0f, 0xed, 0xb7, 0x43, 0x1a, 0x2c, 0xb7, 0xf2, 0xb1, 0x1c, 0xc7, 0x81,
	0x54, 0x75, 0x1d, 0x3e, 0x7c, 0x3d, 0xa4, 0xc1, 0x62, 0x3b, 0x5f, 0xc3, 0xfe, 0x8c, 0xf1, 0x82,
	0x81, 0x3d, 0x72, 0xb8, 0xa0, 0x51, 0xc0, 0x88, 0x9c, 0xe6, 0x27, 0x12, 0xdf, 0x9b, 0x13, 0x5c,
	0x64, 0x79, 0x9d, 0xc4, 0x8b, 0x98, 0xb6, 0xbd, 0x8a, 0x6e, 0x49, 0x74, 0x37, 0xcf, 0x2f, 0x90,
	0x06, 0xec, 0xe4, 0x95, 0xbe, 0xf1, 0x7c, 0xaa, 0x40, 0x05, 0x1d, 0x97, 0x1a, 0x5f, 0xac, 0x9f,
	0x64, 0xa6, 0x6f, 0x7b, 0x3e, 0x35, 0xef, 0x2f, 0x7c, 0xe2, 0xa7, 0x70, 0x38, 0xd7, 0xb9, 0xef,
	0xb9, 0xd4, 0x76, 0x59, 0x14, 0x51, 0x57, 0xc8, 0xb5, 0x51, 0x4a, 0xb2, 0x9a, 0xfd, 0x7c, 0x17,
	0xc4, 0x92, 0x56, 0xa2, 0x88, 0xd7, 0x05, 0x9f, 0xc2, 0xde, 0xf2, 0x2c, 0x39, 0x4d, 0xd8, 0x6d,
	0xc9, 0x3e, 0x72, 0x17, 0x67, 0xc8, 0xa9, 0xe4, 0x3e, 0x83, 0xed, 0x9c, 0xf3, 0x88, 0x72, 0x5f,
	0x8a, 0x4b, 0x59, 0x4c, 0x27, 0x07, 0xbf, 0x23, 0x58, 0xaa, 0xf6, 0x09, 0xec, 0xc6, 0x3d, 0x27,
	0x63, 0x13, 0x2c, 0x1f, 0x5a, 0x7a, 0x7c, 0x1e, 0xc4, 0xd9, 0xd8, 0xbe, 0xcf, 0xb2, 0x35, 0xc0,
	0xdf, 0xc2, 0xe3, 0xe5, 0x16, 0xb9, 0x70, 0x22, 0x61, 0x7b, 0x01, 0xa1, 0x3f, 0xc9, 0x73, 0x55,
	0x34, 0x95, 0xc5, 0x0e, 0xad, 0x58, 0xa0, 0xc7, 0x79, 0xfc, 0x55, 0x3e, 0xe7, 0x19, 0x4e, 0x03,
	0x92, 0xc2, 0xc5, 0x64, 0xc7, 0x2f, 0xc2, 0x5a, 0x40, 0x24, 0x5a, 0xfd, 0x03, 0xc1, 0xc2, 0x41,
	0xdc, 0x83, 0x07, 0x17, 0xf9, 0xa7, 0xfd, 0xd2, 0x78, 0x6e, 0xf4, 0x5e, 0x1b, 0xe5, 0x02, 0x6e,
	0x40, 0x6d, 0x3e, 0x61, 0xf5, 0x7b, 0x66, 0xb3, 0xa3, 0xd9, 0xad, 0x6e, 0xf3, 0xfc, 0x5c, 0x33,
	0x3a, 0x9a, 0xad, 0x5b, 0xd6, 0xcb, 0xa6, 0xd1, 0xd2, 0xec, 0x0b, 0xcd, 0xb2, 0x9a, 0x1d, 0xad,
	0x8c, 0xfe, 0x9b, 0x31, 0x35, 0xeb, 0x45, 0xcf, 0xb0, 0x72, 0x66, 0x03, 0x9f, 0x42, 0xe3, 0xdf,
	0x99, 0x57, 0x9a, 0xa9, 0xb7, 0xf5, 0x56, 0xb3, 0xaf, 0xf7, 0x8c, 0x8c, 0x2b, 0x56, 0xdb, 0xb0,
	0x99, 0xdc, 0x07, 0x18, 0xc3, 0x4e, 0x72, 0x11, 0xcc, 0x55, 0x9f, 0xc7, 0x5e, 0x68, 0xc6, 0x99,
	0x6e, 0x74, 0xca, 0x08, 0x3f, 0x84, 0x72, 0x1a, 0x4b, 0xca, 0x38, 0xd3, 0xce, 0xca, 0x1b, 0xd5,
	0x2e, 0xec, 0x2d, 0x6f, 0x51, 0x93, 0xfe, 0x30, 0xa6, 0x5c, 0xe0, 0x13, 0xb8, 0x47, 0x1c, 0xe1,
	0xc8, 0x41, 0x96, 0x1a, 0xfb, 0x6b, 0xb7, 0xb3, 0x29, 0x65, 0xd5, 0x36, 0x3c, 0x5a, 0x75, 0x0a,
	0xfd, 0xc9, 0x87, 0xfa, 0x18, 0x70, 0x24, 0x6f, 0x85, 0xc9, 0xff, 0x54, 0xd7, 0x39, 0x3c, 0x5e,
	0xe7, 0xf7, 0xe1, 0xd5, 0x3d, 0x1b, 0x5f, 0xdf, 0xa8, 0x85, 0x77, 0x37, 0x6a, 0xe1, 0xfd, 0x8d,
	0x8a, 0x7e, 0x9e, 0xaa, 0xe8, 0xb7, 0xa9, 0x8a, 0xfe, 0x9c, 0xaa, 0xe8, 0x7a, 0xaa, 0xa2, 0xbf,
	0xa6, 0x2a, 0xfa, 0x7b, 0xaa, 0x16, 0xde, 0x4f, 0x55, 0xf4, 0xeb, 0xad, 0x5a, 0xb8, 0xbe, 0x55,
	0x0b, 0xef, 0x6e, 0xd5, 0xc2, 0xf7, 0x4f, 0xe7, 0x5e, 0xaa, 0x30, 0xbe, 0x3c, 0xfc, 0x80, 0x8a,
	0xb7, 0x2c, 0xba, 0xaa, 0xa7, 0xaf, 0xdc, 0x49, 0xfe, 0xca, 0xd5, 0x9d, 0x30, 0xf4, 0x3d, 0xd7,
	0x11, 0x1e, 0x0b, 0xea, 0x44, 0xb0, 0x6f, 0x88, 0x60, 0x97, 0x9b, 0xf2, 0xe5, 0x7a, 0xf2, 0x4f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0xe2, 0x2d, 0x62, 0x16, 0x07, 0x00, 0x00,
}

func (x StorageChallengeDataMessageType) String() string {
	s, ok := StorageChallengeDataMessageType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (x StorageChallengeDataStatus) String() string {
	s, ok := StorageChallengeDataStatus_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *StorageChallengeData) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageChallengeData)
	if !ok {
		that2, ok := that.(StorageChallengeData)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MessageId != that1.MessageId {
		return false
	}
	if this.MessageType != that1.MessageType {
		return false
	}
	if this.ChallengeStatus != that1.ChallengeStatus {
		return false
	}
	if this.TimestampChallengeSent != that1.TimestampChallengeSent {
		return false
	}
	if this.TimestampChallengeRespondedTo != that1.TimestampChallengeRespondedTo {
		return false
	}
	if this.TimestampChallengeVerified != that1.TimestampChallengeVerified {
		return false
	}
	if this.BlockHashWhenChallengeSent != that1.BlockHashWhenChallengeSent {
		return false
	}
	if this.ChallengingMasternodeId != that1.ChallengingMasternodeId {
		return false
	}
	if this.RespondingMasternodeId != that1.RespondingMasternodeId {
		return false
	}
	if !this.ChallengeFile.Equal(that1.ChallengeFile) {
		return false
	}
	if this.ChallengeSliceCorrectHash != that1.ChallengeSliceCorrectHash {
		return false
	}
	if this.ChallengeResponseHash != that1.ChallengeResponseHash {
		return false
	}
	if this.ChallengeId != that1.ChallengeId {
		return false
	}
	return true
}
func (this *StorageChallengeDataChallengeFile) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageChallengeDataChallengeFile)
	if !ok {
		that2, ok := that.(StorageChallengeDataChallengeFile)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.FileHashToChallenge != that1.FileHashToChallenge {
		return false
	}
	if this.ChallengeSliceStartIndex != that1.ChallengeSliceStartIndex {
		return false
	}
	if this.ChallengeSliceEndIndex != that1.ChallengeSliceEndIndex {
		return false
	}
	return true
}
func (this *StorageChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageChallengeRequest)
	if !ok {
		that2, ok := that.(StorageChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *StorageChallengeReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*StorageChallengeReply)
	if !ok {
		that2, ok := that.(StorageChallengeReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *VerifyStorageChallengeRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerifyStorageChallengeRequest)
	if !ok {
		that2, ok := that.(VerifyStorageChallengeRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *VerifyStorageChallengeReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*VerifyStorageChallengeReply)
	if !ok {
		that2, ok := that.(VerifyStorageChallengeReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Data.Equal(that1.Data) {
		return false
	}
	return true
}
func (this *StorageChallengeData) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&dto.StorageChallengeData{")
	s = append(s, "MessageId: "+fmt.Sprintf("%#v", this.MessageId)+",\n")
	s = append(s, "MessageType: "+fmt.Sprintf("%#v", this.MessageType)+",\n")
	s = append(s, "ChallengeStatus: "+fmt.Sprintf("%#v", this.ChallengeStatus)+",\n")
	s = append(s, "TimestampChallengeSent: "+fmt.Sprintf("%#v", this.TimestampChallengeSent)+",\n")
	s = append(s, "TimestampChallengeRespondedTo: "+fmt.Sprintf("%#v", this.TimestampChallengeRespondedTo)+",\n")
	s = append(s, "TimestampChallengeVerified: "+fmt.Sprintf("%#v", this.TimestampChallengeVerified)+",\n")
	s = append(s, "BlockHashWhenChallengeSent: "+fmt.Sprintf("%#v", this.BlockHashWhenChallengeSent)+",\n")
	s = append(s, "ChallengingMasternodeId: "+fmt.Sprintf("%#v", this.ChallengingMasternodeId)+",\n")
	s = append(s, "RespondingMasternodeId: "+fmt.Sprintf("%#v", this.RespondingMasternodeId)+",\n")
	if this.ChallengeFile != nil {
		s = append(s, "ChallengeFile: "+fmt.Sprintf("%#v", this.ChallengeFile)+",\n")
	}
	s = append(s, "ChallengeSliceCorrectHash: "+fmt.Sprintf("%#v", this.ChallengeSliceCorrectHash)+",\n")
	s = append(s, "ChallengeResponseHash: "+fmt.Sprintf("%#v", this.ChallengeResponseHash)+",\n")
	s = append(s, "ChallengeId: "+fmt.Sprintf("%#v", this.ChallengeId)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageChallengeDataChallengeFile) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&dto.StorageChallengeDataChallengeFile{")
	s = append(s, "FileHashToChallenge: "+fmt.Sprintf("%#v", this.FileHashToChallenge)+",\n")
	s = append(s, "ChallengeSliceStartIndex: "+fmt.Sprintf("%#v", this.ChallengeSliceStartIndex)+",\n")
	s = append(s, "ChallengeSliceEndIndex: "+fmt.Sprintf("%#v", this.ChallengeSliceEndIndex)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageChallengeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.StorageChallengeRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *StorageChallengeReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.StorageChallengeReply{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifyStorageChallengeRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.VerifyStorageChallengeRequest{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *VerifyStorageChallengeReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&dto.VerifyStorageChallengeReply{")
	if this.Data != nil {
		s = append(s, "Data: "+fmt.Sprintf("%#v", this.Data)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringStorageChallengesDto(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *StorageChallengeData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageChallengeData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageChallengeData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChallengeId) > 0 {
		i -= len(m.ChallengeId)
		copy(dAtA[i:], m.ChallengeId)
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(len(m.ChallengeId)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.ChallengeResponseHash) > 0 {
		i -= len(m.ChallengeResponseHash)
		copy(dAtA[i:], m.ChallengeResponseHash)
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(len(m.ChallengeResponseHash)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.ChallengeSliceCorrectHash) > 0 {
		i -= len(m.ChallengeSliceCorrectHash)
		copy(dAtA[i:], m.ChallengeSliceCorrectHash)
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(len(m.ChallengeSliceCorrectHash)))
		i--
		dAtA[i] = 0x5a
	}
	if m.ChallengeFile != nil {
		{
			size, err := m.ChallengeFile.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallengesDto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.RespondingMasternodeId) > 0 {
		i -= len(m.RespondingMasternodeId)
		copy(dAtA[i:], m.RespondingMasternodeId)
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(len(m.RespondingMasternodeId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.ChallengingMasternodeId) > 0 {
		i -= len(m.ChallengingMasternodeId)
		copy(dAtA[i:], m.ChallengingMasternodeId)
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(len(m.ChallengingMasternodeId)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.BlockHashWhenChallengeSent) > 0 {
		i -= len(m.BlockHashWhenChallengeSent)
		copy(dAtA[i:], m.BlockHashWhenChallengeSent)
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(len(m.BlockHashWhenChallengeSent)))
		i--
		dAtA[i] = 0x3a
	}
	if m.TimestampChallengeVerified != 0 {
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(m.TimestampChallengeVerified))
		i--
		dAtA[i] = 0x30
	}
	if m.TimestampChallengeRespondedTo != 0 {
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(m.TimestampChallengeRespondedTo))
		i--
		dAtA[i] = 0x28
	}
	if m.TimestampChallengeSent != 0 {
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(m.TimestampChallengeSent))
		i--
		dAtA[i] = 0x20
	}
	if m.ChallengeStatus != 0 {
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(m.ChallengeStatus))
		i--
		dAtA[i] = 0x18
	}
	if m.MessageType != 0 {
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x10
	}
	if len(m.MessageId) > 0 {
		i -= len(m.MessageId)
		copy(dAtA[i:], m.MessageId)
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(len(m.MessageId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageChallengeDataChallengeFile) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageChallengeDataChallengeFile) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageChallengeDataChallengeFile) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChallengeSliceEndIndex != 0 {
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(m.ChallengeSliceEndIndex))
		i--
		dAtA[i] = 0x18
	}
	if m.ChallengeSliceStartIndex != 0 {
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(m.ChallengeSliceStartIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.FileHashToChallenge) > 0 {
		i -= len(m.FileHashToChallenge)
		copy(dAtA[i:], m.FileHashToChallenge)
		i = encodeVarintStorageChallengesDto(dAtA, i, uint64(len(m.FileHashToChallenge)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallengesDto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StorageChallengeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StorageChallengeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StorageChallengeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallengesDto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyStorageChallengeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyStorageChallengeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyStorageChallengeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallengesDto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VerifyStorageChallengeReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VerifyStorageChallengeReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VerifyStorageChallengeReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Data != nil {
		{
			size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintStorageChallengesDto(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintStorageChallengesDto(dAtA []byte, offset int, v uint64) int {
	offset -= sovStorageChallengesDto(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StorageChallengeData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MessageId)
	if l > 0 {
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	if m.MessageType != 0 {
		n += 1 + sovStorageChallengesDto(uint64(m.MessageType))
	}
	if m.ChallengeStatus != 0 {
		n += 1 + sovStorageChallengesDto(uint64(m.ChallengeStatus))
	}
	if m.TimestampChallengeSent != 0 {
		n += 1 + sovStorageChallengesDto(uint64(m.TimestampChallengeSent))
	}
	if m.TimestampChallengeRespondedTo != 0 {
		n += 1 + sovStorageChallengesDto(uint64(m.TimestampChallengeRespondedTo))
	}
	if m.TimestampChallengeVerified != 0 {
		n += 1 + sovStorageChallengesDto(uint64(m.TimestampChallengeVerified))
	}
	l = len(m.BlockHashWhenChallengeSent)
	if l > 0 {
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	l = len(m.ChallengingMasternodeId)
	if l > 0 {
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	l = len(m.RespondingMasternodeId)
	if l > 0 {
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	if m.ChallengeFile != nil {
		l = m.ChallengeFile.Size()
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	l = len(m.ChallengeSliceCorrectHash)
	if l > 0 {
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	l = len(m.ChallengeResponseHash)
	if l > 0 {
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	l = len(m.ChallengeId)
	if l > 0 {
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	return n
}

func (m *StorageChallengeDataChallengeFile) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.FileHashToChallenge)
	if l > 0 {
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	if m.ChallengeSliceStartIndex != 0 {
		n += 1 + sovStorageChallengesDto(uint64(m.ChallengeSliceStartIndex))
	}
	if m.ChallengeSliceEndIndex != 0 {
		n += 1 + sovStorageChallengesDto(uint64(m.ChallengeSliceEndIndex))
	}
	return n
}

func (m *StorageChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	return n
}

func (m *StorageChallengeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	return n
}

func (m *VerifyStorageChallengeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	return n
}

func (m *VerifyStorageChallengeReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		l = m.Data.Size()
		n += 1 + l + sovStorageChallengesDto(uint64(l))
	}
	return n
}

func sovStorageChallengesDto(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStorageChallengesDto(x uint64) (n int) {
	return sovStorageChallengesDto(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *StorageChallengeData) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageChallengeData{`,
		`MessageId:` + fmt.Sprintf("%v", this.MessageId) + `,`,
		`MessageType:` + fmt.Sprintf("%v", this.MessageType) + `,`,
		`ChallengeStatus:` + fmt.Sprintf("%v", this.ChallengeStatus) + `,`,
		`TimestampChallengeSent:` + fmt.Sprintf("%v", this.TimestampChallengeSent) + `,`,
		`TimestampChallengeRespondedTo:` + fmt.Sprintf("%v", this.TimestampChallengeRespondedTo) + `,`,
		`TimestampChallengeVerified:` + fmt.Sprintf("%v", this.TimestampChallengeVerified) + `,`,
		`BlockHashWhenChallengeSent:` + fmt.Sprintf("%v", this.BlockHashWhenChallengeSent) + `,`,
		`ChallengingMasternodeId:` + fmt.Sprintf("%v", this.ChallengingMasternodeId) + `,`,
		`RespondingMasternodeId:` + fmt.Sprintf("%v", this.RespondingMasternodeId) + `,`,
		`ChallengeFile:` + strings.Replace(fmt.Sprintf("%v", this.ChallengeFile), "StorageChallengeDataChallengeFile", "StorageChallengeDataChallengeFile", 1) + `,`,
		`ChallengeSliceCorrectHash:` + fmt.Sprintf("%v", this.ChallengeSliceCorrectHash) + `,`,
		`ChallengeResponseHash:` + fmt.Sprintf("%v", this.ChallengeResponseHash) + `,`,
		`ChallengeId:` + fmt.Sprintf("%v", this.ChallengeId) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageChallengeDataChallengeFile) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageChallengeDataChallengeFile{`,
		`FileHashToChallenge:` + fmt.Sprintf("%v", this.FileHashToChallenge) + `,`,
		`ChallengeSliceStartIndex:` + fmt.Sprintf("%v", this.ChallengeSliceStartIndex) + `,`,
		`ChallengeSliceEndIndex:` + fmt.Sprintf("%v", this.ChallengeSliceEndIndex) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageChallengeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageChallengeRequest{`,
		`Data:` + strings.Replace(this.Data.String(), "StorageChallengeData", "StorageChallengeData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *StorageChallengeReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&StorageChallengeReply{`,
		`Data:` + strings.Replace(this.Data.String(), "StorageChallengeData", "StorageChallengeData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifyStorageChallengeRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyStorageChallengeRequest{`,
		`Data:` + strings.Replace(this.Data.String(), "StorageChallengeData", "StorageChallengeData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *VerifyStorageChallengeReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&VerifyStorageChallengeReply{`,
		`Data:` + strings.Replace(this.Data.String(), "StorageChallengeData", "StorageChallengeData", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringStorageChallengesDto(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *StorageChallengeData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallengesDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageChallengeData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageChallengeData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= StorageChallengeDataMessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeStatus", wireType)
			}
			m.ChallengeStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeStatus |= StorageChallengeDataStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampChallengeSent", wireType)
			}
			m.TimestampChallengeSent = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampChallengeSent |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampChallengeRespondedTo", wireType)
			}
			m.TimestampChallengeRespondedTo = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampChallengeRespondedTo |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimestampChallengeVerified", wireType)
			}
			m.TimestampChallengeVerified = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimestampChallengeVerified |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHashWhenChallengeSent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHashWhenChallengeSent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengingMasternodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengingMasternodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RespondingMasternodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RespondingMasternodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeFile", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ChallengeFile == nil {
				m.ChallengeFile = &StorageChallengeDataChallengeFile{}
			}
			if err := m.ChallengeFile.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSliceCorrectHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeSliceCorrectHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeResponseHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeResponseHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChallengeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallengesDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageChallengeDataChallengeFile) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallengesDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: challengeFile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: challengeFile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FileHashToChallenge", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FileHashToChallenge = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSliceStartIndex", wireType)
			}
			m.ChallengeSliceStartIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSliceStartIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChallengeSliceEndIndex", wireType)
			}
			m.ChallengeSliceEndIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChallengeSliceEndIndex |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallengesDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallengesDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StorageChallengeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallengesDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StorageChallengeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallengesDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StorageChallengeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StorageChallengeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StorageChallengeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallengesDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyStorageChallengeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallengesDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyStorageChallengeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyStorageChallengeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StorageChallengeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallengesDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VerifyStorageChallengeReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStorageChallengesDto
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VerifyStorageChallengeReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VerifyStorageChallengeReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Data == nil {
				m.Data = &StorageChallengeData{}
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStorageChallengesDto(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStorageChallengesDto
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStorageChallengesDto(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStorageChallengesDto
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStorageChallengesDto
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStorageChallengesDto
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStorageChallengesDto
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStorageChallengesDto
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStorageChallengesDto        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStorageChallengesDto          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStorageChallengesDto = fmt.Errorf("proto: unexpected end of group")
)
