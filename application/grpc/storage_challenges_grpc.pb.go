// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	dto "github.com/pastelnetwork/storage-challenges/application/dto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StorageChallengeClient is the client API for StorageChallenge service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageChallengeClient interface {
	StorageChallenge(ctx context.Context, in *dto.StorageChallengeRequest, opts ...grpc.CallOption) (*dto.StorageChallengeReply, error)
	VerifyStorageChallenge(ctx context.Context, in *dto.VerifyStorageChallengeRequest, opts ...grpc.CallOption) (*dto.VerifyStorageChallengeReply, error)
}

type storageChallengeClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageChallengeClient(cc grpc.ClientConnInterface) StorageChallengeClient {
	return &storageChallengeClient{cc}
}

func (c *storageChallengeClient) StorageChallenge(ctx context.Context, in *dto.StorageChallengeRequest, opts ...grpc.CallOption) (*dto.StorageChallengeReply, error) {
	out := new(dto.StorageChallengeReply)
	err := c.cc.Invoke(ctx, "/storagechallenges.StorageChallenge/StorageChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageChallengeClient) VerifyStorageChallenge(ctx context.Context, in *dto.VerifyStorageChallengeRequest, opts ...grpc.CallOption) (*dto.VerifyStorageChallengeReply, error) {
	out := new(dto.VerifyStorageChallengeReply)
	err := c.cc.Invoke(ctx, "/storagechallenges.StorageChallenge/VerifyStorageChallenge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageChallengeServer is the server API for StorageChallenge service.
// All implementations must embed UnimplementedStorageChallengeServer
// for forward compatibility
type StorageChallengeServer interface {
	StorageChallenge(context.Context, *dto.StorageChallengeRequest) (*dto.StorageChallengeReply, error)
	VerifyStorageChallenge(context.Context, *dto.VerifyStorageChallengeRequest) (*dto.VerifyStorageChallengeReply, error)
	mustEmbedUnimplementedStorageChallengeServer()
}

// UnimplementedStorageChallengeServer must be embedded to have forward compatible implementations.
type UnimplementedStorageChallengeServer struct {
}

func (UnimplementedStorageChallengeServer) StorageChallenge(context.Context, *dto.StorageChallengeRequest) (*dto.StorageChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StorageChallenge not implemented")
}
func (UnimplementedStorageChallengeServer) VerifyStorageChallenge(context.Context, *dto.VerifyStorageChallengeRequest) (*dto.VerifyStorageChallengeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyStorageChallenge not implemented")
}
func (UnimplementedStorageChallengeServer) mustEmbedUnimplementedStorageChallengeServer() {}

// UnsafeStorageChallengeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageChallengeServer will
// result in compilation errors.
type UnsafeStorageChallengeServer interface {
	mustEmbedUnimplementedStorageChallengeServer()
}

func RegisterStorageChallengeServer(s grpc.ServiceRegistrar, srv StorageChallengeServer) {
	s.RegisterService(&StorageChallenge_ServiceDesc, srv)
}

func _StorageChallenge_StorageChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.StorageChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).StorageChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagechallenges.StorageChallenge/StorageChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).StorageChallenge(ctx, req.(*dto.StorageChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageChallenge_VerifyStorageChallenge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dto.VerifyStorageChallengeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageChallengeServer).VerifyStorageChallenge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/storagechallenges.StorageChallenge/VerifyStorageChallenge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageChallengeServer).VerifyStorageChallenge(ctx, req.(*dto.VerifyStorageChallengeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageChallenge_ServiceDesc is the grpc.ServiceDesc for StorageChallenge service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageChallenge_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "storagechallenges.StorageChallenge",
	HandlerType: (*StorageChallengeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StorageChallenge",
			Handler:    _StorageChallenge_StorageChallenge_Handler,
		},
		{
			MethodName: "VerifyStorageChallenge",
			Handler:    _StorageChallenge_VerifyStorageChallenge_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "storage_challenges.proto",
}
